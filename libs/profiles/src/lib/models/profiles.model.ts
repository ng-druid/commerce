//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.1.13.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
export enum ProfileStatuses {
  Submitted = 0,
  Approved = 1,
  Rejected = 2,
  Deleted = 3,
}

export enum ProfileTypes {
  Person = 0,
  Company = 1,
  Shop = 2,
}

export enum ProfileSubtypes {
  Agent = 0,
  Broker = 1,
  Dealer = 2,
  Seller = 3,
}

export enum AdTypes {
  General = 0,
  RealEstate = 1,
  Rental = 2,
  Auto = 3,
  Job = 4,
}

export class ProfileImage implements IProfileImage {
  id: string | undefined;
  path: string | undefined;
  weight: SByte;

  constructor(data?: IProfileImage) {
      if (data) {
          for (const property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  static fromJS(data: any): ProfileImage {
    data = typeof data === 'object' ? data : {};
    const result = new ProfileImage();
    result.init(data);
    return result;
  }

  init(_data?: any) {
      if (_data) {
          this.id = _data["Id"];
          this.path = _data["Path"];
          this.weight = _data["Weight"] ? SByte.fromJS(_data["Weight"]) : <any>undefined;
      }
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["Id"] = this.id;
      data["Path"] = this.path;
      data["Weight"] = this.weight ? this.weight.toJSON() : <any>undefined;
      return data;
  }
}

export interface IProfileImage {
  id: string | undefined;
  path: string | undefined;
  weight: SByte;
}

export class SByte implements ISByte {

  constructor(data?: ISByte) {
      if (data) {
          for (const property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  static fromJS(data: any): SByte {
    data = typeof data === 'object' ? data : {};
    const result = new SByte();
    result.init(data);
    return result;
  }

  init(_data?: any) {
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      return data;
  }
}

export interface ISByte {
}

export class PhoneNumber implements IPhoneNumber {
  type: PhoneNumberTypes;
  value: string | undefined;

  constructor(data?: IPhoneNumber) {
      if (data) {
          for (const property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  static fromJS(data: any): PhoneNumber {
    data = typeof data === 'object' ? data : {};
    const result = new PhoneNumber();
    result.init(data);
    return result;
  }

  init(_data?: any) {
      if (_data) {
          this.type = _data["Type"];
          this.value = _data["Value"];
      }
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["Type"] = this.type;
      data["Value"] = this.value;
      return data;
  }
}

export interface IPhoneNumber {
  type: PhoneNumberTypes;
  value: string | undefined;
}

export enum PhoneNumberTypes {
  Email = 0,
  Fax = 1,
}

export class Location implements ILocation {
  title: string | undefined;
  type: LocationTypes;
  address: Address | undefined;
  phoneNumbers: PhoneNumber[] | undefined;

  constructor(data?: ILocation) {
      if (data) {
          for (const property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  static fromJS(data: any): Location {
    data = typeof data === 'object' ? data : {};
    const result = new Location();
    result.init(data);
    return result;
  }

  init(_data?: any) {
      if (_data) {
          this.title = _data["Title"];
          this.type = _data["Type"];
          this.address = _data["Address"] ? Address.fromJS(_data["Address"]) : <any>undefined;
          if (Array.isArray(_data["PhoneNumbers"])) {
              this.phoneNumbers = [] as any;
              for (const item of _data["PhoneNumbers"])
                  this.phoneNumbers.push(PhoneNumber.fromJS(item));
          }
      }
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["Title"] = this.title;
      data["Type"] = this.type;
      data["Address"] = this.address ? this.address.toJSON() : <any>undefined;
      if (Array.isArray(this.phoneNumbers)) {
          data["PhoneNumbers"] = [];
          for (const item of this.phoneNumbers)
              data["PhoneNumbers"].push(item.toJSON());
      }
      return data;
  }
}

export interface ILocation {
  title: string | undefined;
  type: LocationTypes;
  address: Address | undefined;
  phoneNumbers: PhoneNumber[] | undefined;
}

export enum LocationTypes {
  Home = 0,
  Office = 1,
}

export class Address implements IAddress {
  street1: string | undefined;
  street2: string | undefined;
  street3: string | undefined;
  city: string | undefined;
  state: string | undefined;
  zip: string | undefined;
  country: string | undefined;

  constructor(data?: IAddress) {
      if (data) {
          for (const property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  static fromJS(data: any): Address {
    data = typeof data === 'object' ? data : {};
    const result = new Address();
    result.init(data);
    return result;
  }

  init(_data?: any) {
      if (_data) {
          this.street1 = _data["Street1"];
          this.street2 = _data["Street2"];
          this.street3 = _data["Street3"];
          this.city = _data["City"];
          this.state = _data["State"];
          this.zip = _data["Zip"];
          this.country = _data["Country"];
      }
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["Street1"] = this.street1;
      data["Street2"] = this.street2;
      data["Street3"] = this.street3;
      data["City"] = this.city;
      data["State"] = this.state;
      data["Zip"] = this.zip;
      data["Country"] = this.country;
      return data;
  }
}

export interface IAddress {
  street1: string | undefined;
  street2: string | undefined;
  street3: string | undefined;
  city: string | undefined;
  state: string | undefined;
  zip: string | undefined;
  country: string | undefined;
}

export class Profile implements IProfile {
  id: string | undefined;
  parentId: string | undefined;
  userId: string | undefined;
  title: string | undefined;
  status: ProfileStatuses;
  type: ProfileTypes;
  subtype: ProfileSubtypes;
  adspace: AdTypes;
  firstName: string | undefined;
  lastName: string | undefined;
  middleName: string | undefined;
  preferredName: string | undefined;
  companyName: string | undefined;
  email: string | undefined;
  introduction: string | undefined;
  logo: ProfileImage | undefined;
  headshot: ProfileImage | undefined;
  phoneNumbers: PhoneNumber[] | undefined;
  locations: Location[] | undefined;

  constructor(data?: IProfile) {
      if (data) {
          for (const property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  static fromJS(data: any): Profile {
    data = typeof data === 'object' ? data : {};
    const result = new Profile();
    result.init(data);
    return result;
  }

  init(_data?: any) {
      if (_data) {
          this.id = _data["Id"];
          this.parentId = _data["ParentId"];
          this.userId = _data["UserId"];
          this.title = _data["Title"];
          this.status = _data["Status"];
          this.type = _data["Type"];
          this.subtype = _data["Subtype"];
          this.adspace = _data["Adspace"];
          this.firstName = _data["FirstName"];
          this.lastName = _data["LastName"];
          this.middleName = _data["MiddleName"];
          this.preferredName = _data["PreferredName"];
          this.companyName = _data["CompanyName"];
          this.email = _data["Email"];
          this.introduction = _data["Introduction"];
          this.logo = _data["Logo"] ? ProfileImage.fromJS(_data["Logo"]) : <any>undefined;
          this.headshot = _data["Headshot"] ? ProfileImage.fromJS(_data["Headshot"]) : <any>undefined;
          if (Array.isArray(_data["PhoneNumbers"])) {
              this.phoneNumbers = [] as any;
              for (const item of _data["PhoneNumbers"])
                  this.phoneNumbers.push(PhoneNumber.fromJS(item));
          }
          if (Array.isArray(_data["Locations"])) {
              this.locations = [] as any;
              for (const item of _data["Locations"])
                  this.locations.push(Location.fromJS(item));
          }
      }
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["Id"] = this.id;
      data["ParentId"] = this.parentId;
      data["UserId"] = this.userId;
      data["Title"] = this.title;
      data["Status"] = this.status;
      data["Type"] = this.type;
      data["Subtype"] = this.subtype;
      data["Adspace"] = this.adspace;
      data["FirstName"] = this.firstName;
      data["LastName"] = this.lastName;
      data["MiddleName"] = this.middleName;
      data["PreferredName"] = this.preferredName;
      data["CompanyName"] = this.companyName;
      data["Email"] = this.email;
      data["Introduction"] = this.introduction;
      data["Logo"] = this.logo ? this.logo.toJSON() : <any>undefined;
      data["Headshot"] = this.headshot ? this.headshot.toJSON() : <any>undefined;
      if (Array.isArray(this.phoneNumbers)) {
          data["PhoneNumbers"] = [];
          for (let item of this.phoneNumbers)
              data["PhoneNumbers"].push(item.toJSON());
      }
      if (Array.isArray(this.locations)) {
          data["Locations"] = [];
          for (let item of this.locations)
              data["Locations"].push(item.toJSON());
      }
      return data;
  }
}

export interface IProfile {
  id: string | undefined;
  parentId: string | undefined;
  userId: string | undefined;
  title: string | undefined;
  status: ProfileStatuses;
  type: ProfileTypes;
  subtype: ProfileSubtypes;
  adspace: AdTypes;
  firstName: string | undefined;
  lastName: string | undefined;
  middleName: string | undefined;
  preferredName: string | undefined;
  companyName: string | undefined;
  email: string | undefined;
  introduction: string | undefined;
  logo: ProfileImage | undefined;
  headshot: ProfileImage | undefined;
  phoneNumbers: PhoneNumber[] | undefined;
  locations: Location[] | undefined;
}
